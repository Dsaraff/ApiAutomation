package moreresponsefieldsvalidation;

import org.testng.annotations.Test;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import junit.framework.Assert;

public class validatingresponsefields {
	@Test
	public void getspecificproduct()
	{
		// To declare authorization details
		String clientId = "CBC8B951-512C-4C43-B336-039031E080D9";
		//String authToken = "eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiJCMjQ0REY3Ni0yMTBFLTQ2OUUtOTYyQS03MzM0OTkzODRGRTUiLCJpc3MiOiJDTE9VRCIsInN1YiI6IjJCeXJYN2Y3d1hpcXZXcmp0YmZDRkcxQ0p4dXZqU0YvSk1KM1NIeCs2cmk0aitTK2dlRUltMTFSSlFDejRuamZ5Q3d3YkFMTmxHMVNBRGJlTEl1aWdkVDNkZGlZV2xFd2FSNGg3Z09iTXVtWjl6Rkp6RWNid0M1Vnd6TkRVdDJjT0dNQ0pPR1ovWmhiNWVFaUcrNnk4WmRkbE5sYzgyL0ZvVmlpUDJ4OFBCZ0ZvZ2FTNnl3M09TOXN1N0cyaWgzcVc5OVdIVEFNWWNERWJUVVhjMTNkZS9UNW9QdWc5Z00xRDByUlEwWUhGWFRJcXQ2RUZSU1BPUWdna245VVdRQ0w1Q2p0eTRDZnRyYVJOSzRKdktqOVNES0R2cklabFFLT1ZtSGdSNkM3eGpmcVNsdXVyMmx6TjVpS1J1dnZ1QSsyY210NzZMTDh5TzNzV3NTTHRuelZqby90bi9pcy9xWjdUOFQ4MDZPR0Rzc2FKY2pqTXJ5T0s3UnNZNWtNdmc1Wi91MGtJUTBucnV1M1RJVjdyWE9Ub1hTdGJkeUMxVEZDKzhvOG95dnFJVkRSRjh0ajRla3FLMTAwbHpzTWxjOUVKZk1KRVphT0xXUEtidEdwdWxITk5kNHZGQUljV25kdlpaMUVJUFBmdHBiZDhjTVRBNmtDZTRwbkdkUGNLWlNxbnBsTElyRFYvL3pYQzlhV1o2Tm81a0VUd1pLQXhUMkluemVDcWtSWldiU1gwb0FUVWZzZm1iWFk5ZkkyODgzWENUMU5EOVU0VGJHNG9IYzFDdGtjRDhJNlZVVGxJVFo1UHFGQzAwVnFpbTloQTQ5Vmp1MVBsYWtLY1JGWngwYkFSQjk4M1ZmbGNZTWJENFRFV2xyUjVyQ3Jma01YSHdzVmlBQWJHNkxlUUJJMlZMSnZIUjdSQzZuc2ExdUFQZHVXbnVuVUVDaFlOV1VLbXFWTUJibWN2RTdGU01wS3lwcWtldklUd0FrR3FYNGdKQjZNbU0rOVlVOTVSbkRLVDVuelczUnV5OG9zVmhtaDQ1WkVQdkIrOWczWEkzczJ3L1NKbCtmWU4zTGd6Q3p1UGdydnNHZmtsTzUxVXRDNmJzdzhwK00wcDNFRzFqRGdmTmh6T0JVZ2M5dmZLQXhkY3dwSjcrdGo2anZDL0RJVFArcGNtWHBaV3dCRnJuM1hSTGZ2ZHhMZXNmQzhhRkxLVmMySm9CZW02S25GTEpIaGNPYlFDM3VHTnZQVDRGND0iLCJpYXQiOjE3MDI4ODA0MTAsImV4cCI6MTcwMjk2NjgxMH0.4qytB5xQXEUD_ZW2roCqMWEYbrqV4OWehJcCl4FqAWBnVK_VO0kWwIp6gb1WPUofaBK-D2HN5pmETvLYtdA5DQ";
		//String authToken = "eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiJCMjQ0REY3Ni0yMTBFLTQ2OUUtOTYyQS03MzM0OTkzODRGRTUiLCJpc3MiOiJDTE9VRCIsInN1YiI6IjJCeXJYN2Y3d1hpcXZXcmp0YmZDRkcxQ0p4dXZqU0YvSk1KM1NIeCs2cmk0aitTK2dlRUltMTFSSlFDejRuamZ5Q3d3YkFMTmxHMVNBRGJlTEl1aWdkVDNkZGlZV2xFd2FSNGg3Z09iTXVtWjl6Rkp6RWNid0M1Vnd6TkRVdDJjT0dNQ0pPR1ovWmhiNWVFaUcrNnk4WmRkbE5sYzgyL0ZvVmlpUDJ4OFBCZ0ZvZ2FTNnl3M09TOXN1N0cyaWgzcVc5OVdIVEFNWWNERWJUVVhjMTNkZS9UNW9QdWc5Z00xRDByUlEwWUhGWFRJcXQ2RUZSU1BPUWdna245VVdRQ0w1Q2p0eTRDZnRyYVJOSzRKdktqOVNES0R2cklabFFLT1ZtSGdSNkM3eGpmcVNsdXVyMmx6TjVpS1J1dnZ1QSsyY210NzZMTDh5TzNzV3NTTHRuelZqby90bi9pcy9xWjdUOFQ4MDZPR0Rzc2FKY2pqTXJ5T0s3UnNZNWtNdmc1Wi91MGtJUTBucnV1M1RJVjdyWE9Ub1hTdGJkeUMxVEZDKzhvOG95dnFJVkRSRjh0ajRla3FLMTAwbHpzTWxjOUVKZk1KRVphT0xXUEtidEdwdWxITk5kNHZGQUljV25kdlpaMUVJUFBmdHBiZDhjTVRBNmtDZTRwbkdkUGNLWlNxbnBsTElyRFYvL3pYQzlhV1o2Tm81a0VUd1pLQXhUMkluemVDcWtSWldiU1gwb0FUVWZzZm1iWFk5ZkkyODgzWENUMU5EOVU0VGJHNG9IYzFDdGtjRDhJNlZVVGxJVFo1UHFGQzAwVnFpbTloQTQ5Vmp1MVBsYWtLY1JGWngwYkFSQjk4M1ZmbGNZTWJENFRFV2xyUjVyQ3Jma01YSHdzVmlBQWJHNkxlUUJJMlZMSnZIUjdSQzZuc2ExdUFQZHVXbnVuVUVDaFlOV1VLbXFWTUJibWN2RTdGU01wS3lwcWtldklUd0FrR3FYNGdKQjZNbU0rOVlVOTVSbkRLVDVuelczUnV5OG9zVmhtaDQ1WkVQdkIrOWczWEkzczJ3L1NKbCtmWU4zTGd6Q3p1UGdydnNHZmtsTzUxVXRDNmJzdzhwK00wcDNFRzFqRGdmTmh6T0JVZ2M5dmZLQXhkY3dwSjcrdGo2anZDL0RJVFArcGNtWHBaV3dCRnJuM1hSTGZ2ZHhMZXNmQzhhRkxLVmMySm9CZW02S25GTEpIaGNPYlFDM3VHTnZQVDRGND0iLCJpYXQiOjE3MDI4ODA0MTAsImV4cCI6MTcwMjk2NjgxMH0.4qytB5xQXEUD_ZW2roCqMWEYbrqV4OWehJcCl4FqAWBnVK_VO0kWwIp6gb1WPUofaBK-D2HN5pmETvLYtdA5DQ";
		String authToken = "eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiJENDVDRjkyRC1FNjQ2LTREODEtOTJEOC0wNEJENDIzQ0Y4N0IiLCJpc3MiOiJDTE9VRCIsInN1YiI6IjJCeXJYN2Y3d1hpcXZXcmp0YmZDRk9lU3RqTEVsVnhDRHNIRm84MWJTSWk0aitTK2dlRUltMTFSSlFDejRuamZ5Q3d3YkFMTmxHMVNBRGJlTEl1aWdkVDNkZGlZV2xFd2FSNGg3Z09iTXVtWjl6Rkp6RWNid0M1Vnd6TkRVdDJjT0dNQ0pPR1ovWmhiNWVFaUcrNnk4WmRkbE5sYzgyL0ZvVmlpUDJ4OFBCZ0ZvZ2FTNnl3M09TOXN1N0cyaWgzcVc5OVdIVEFNWWNERWJUVVhjMTNkZS9UNW9QdWc5Z00xRDByUlEwWUhGWFRJcXQ2RUZSU1BPUWdna245VVdRQ0w1Q2p0eTRDZnRyYVJOSzRKdktqOVNES0R2cklabFFLT1ZtSGdSNkM3eGpmcVNsdXVyMmx6TjVpS1J1dnZ1QSsyY210NzZMTDh5TzNzV3NTTHRuelZqby90bi9pcy9xWjdUOFQ4MDZPR0Rzc2FKY2pqTXJ5T0s3UnNZNWtNdmc1Wi91MGtJUTBucnV1M1RJVjdyWE9Ub1hTdGJkeUMxVEZDKzhvOG95dnFJVkRSRjh0ajRla3FLMTAwbHpzTWxjOUVKZk1KRVphT0xXUEtidEdwdWxITk5kNHZGQUljV25kdlpaMUVJUFBmdHBiZDhjTVRBNmtDZTRwbkdkUGNLWlNxbnBsTElyRFYvL3pYQzlhV1o2Tm81a0VUd1pLQXhUMkluemVDcWtSWldiU1gwb0FUVWZzZm1iWFk5ZkkyODgzWENUMU5EOVU0VGJHNG9IYzFDdGtjRDhJNlZVVGxJVFo1UHFGQzAwVnFpbTloQTQ5Vmp1MVBsYWtLY1JGWngwYkFSQjk4M1ZmbGNZTWJENFRFV2xyUjVrdVUzWG5abjJFaDQ4WmFDblprTWI0Ym9VRCs3NFQxRGV5U093cnZLay9lenFnbGJWdnkvcnN6dmRhSnZMV0tKMDdGU01wS3lwcWtldklUd0FrR3FYNGdKQjZNbU0rOVlVOTVSbkRLVDVuelczUnV5OG9zVmhtaDQ1WkVQdkIrOWczWEkzczJ3L1NKbCtmWU4zTGd6Q3p1UGdydnNHZmtsTzUxVXRDNmJzdzhwK00wcDNFRzFqRGdmTmh6T0JVZ2M5dmZLQXhkY3dwSjcrdGo2anZDL0RJVFArcGNtWHBaV3dCRnJuM1hSTGZ2ZHhMZXNmQzhhRkxLVmMySm9CZW02S25GTEpIaGNPYlFDM3VHTnZQVDRGND0iLCJpYXQiOjE3MDMxMzY3MTYsImV4cCI6MTcwMzIyMzExNn0.UDYA8wWvnCCkm1cZ_Suhn6zxD_jaovuYElgYno5BLzk12tVWLzgH6H8U6HFJzZtcwcWRuIy9lT4eV1gK-xn4EQ";
		// To send the request and capture the response
		RequestSpecification request = RestAssured.given();
		request.header("X-Cloud-Client-Type-Id", clientId);
		request.header("Content-Type", "application/json");
		request.header("Authorization","Bearer "+ authToken);
		//request.body(payload.toJSONString());

		// To send the request and capture the response
		Response responseResult = request.get("https://api.kicchin.com/service-provider-service/rest/serviceproviders/814CDACB-BC4F-4B28-B12C-ABFCB7DCCA6A/products/E2AC306D-335B-47B8-AD5A-7D874D0F5F04"); // Removed the absolute URL
		String response = responseResult.getBody().asString();
		int statusCode = responseResult.getStatusCode();

		// To print the response and status code
		System.out.println("Response body is " + response);
		System.out.println("StatusCode is " + statusCode);

		// To add assertions for response
		Assert.assertEquals(statusCode, 200);
		// To add assertion - id is not null
		Assert.assertNotNull (responseResult.path("id"));
		//Asserting - item name = Fresh Fruit juice
		Assert.assertEquals("Fresh Fruit Juice", responseResult.path("itemName"));
		//Asserting Product URL
		Assert.assertTrue(responseResult.path("productUrl").startsWith("https://www.youtube.com/"));
		//Asserting itemDescription is equals to "made with fresh fruits"
		Assert.assertEquals("made with fresh fruits", responseResult.path("itemDescription"));
		//Asserting Category contains sweets
		Assert.assertTrue(responseResult.path("Category").contains("SWEETS")); 
		//Asserting tags contains sweets
		Assert.assertTrue(responseResult.path("tags").contains("SWEETS")); 
		//Asserting variant types is equal
		Assert.assertTrue(responseResult.path("variantType").contains("bottle"));
	}
}

